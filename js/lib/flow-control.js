// Generated by CoffeeScript 1.12.2
(function() {
  var doBatch, doBatchArray, doBatchObject, map, mapLimit, mapSeries, ref,
    slice = [].slice;

  ref = require('./collections'), map = ref.map, mapSeries = ref.mapSeries, mapLimit = ref.mapLimit;

  module.exports = {
    series: function(functions) {
      return doBatch(mapSeries, functions);
    },
    parallel: function(functions) {
      return doBatch(map, functions);
    },
    parallelLimit: function(functions, concurrency) {
      var makeMapFn;
      makeMapFn = function(concurrency) {
        return function(functions, iterator) {
          return mapLimit(functions, concurrency, iterator);
        };
      };
      return doBatch(makeMapFn(concurrency), functions);
    },
    applyToEach: function() {
      var args, functions;
      functions = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return map(functions, function(fn) {
        return fn.apply({}, args);
      });
    },
    applyToEachSeries: function() {
      var args, functions;
      functions = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return mapSeries(functions, function(fn) {
        return fn.apply({}, args);
      });
    }
  };

  doBatch = function(map, functions) {
    if (Array.isArray(functions)) {
      return doBatchArray(map, functions);
    } else {
      return doBatchObject(map, functions);
    }
  };

  doBatchArray = function(map, functions) {
    return map(functions, function(fn) {
      return fn();
    });
  };

  doBatchObject = function(map, obj) {
    var functions, key, keys, value;
    keys = Object.keys(obj);
    functions = (function() {
      var results1;
      results1 = [];
      for (key in obj) {
        value = obj[key];
        results1.push(value);
      }
      return results1;
    })();
    return map(functions, function(fn) {
      return fn();
    }).then(function(results) {
      var i, j, len, outputs, result;
      outputs = {};
      for (i = j = 0, len = results.length; j < len; i = ++j) {
        result = results[i];
        outputs[keys[i]] = result;
      }
      return outputs;
    });
  };

}).call(this);

//# sourceMappingURL=flow-control.js.map
