// Generated by CoffeeScript 1.6.2
(function() {
  var doBatch, doBatchArray, doBatchObject, map, mapLimit, mapSeries, throttle, _ref,
    __slice = [].slice;

  _ref = require('./collections'), map = _ref.map, mapSeries = _ref.mapSeries, mapLimit = _ref.mapLimit;

  throttle = require("f-throttle");

  module.exports = {
    series: function(functions) {
      return doBatch(mapSeries, functions);
    },
    parallel: function(functions) {
      return doBatch(map, functions);
    },
    parallelLimit: function(functions, concurrency) {
      var makeMapFn;

      makeMapFn = function(concurrency) {
        return function(functions, iterator) {
          return mapLimit(functions, concurrency, iterator);
        };
      };
      return doBatch(makeMapFn(concurrency), functions);
    },
    applyToEach: function() {
      var args, functions;

      functions = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return map(functions, function(fn) {
        return fn.apply({}, args);
      });
    },
    applyToEachSeries: function() {
      var args, functions;

      functions = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return mapSeries(functions, function(fn) {
        return fn.apply({}, args);
      });
    }
  };

  doBatch = function(map, functions) {
    if (Array.isArray(functions)) {
      return doBatchArray(map, functions);
    } else {
      return doBatchObject(map, functions);
    }
  };

  doBatchArray = function(map, functions) {
    return map(functions, function(fn) {
      return fn();
    });
  };

  doBatchObject = function(map, obj) {
    var functions, key, keys, value;

    keys = Object.keys(obj);
    functions = (function() {
      var _results;

      _results = [];
      for (key in obj) {
        value = obj[key];
        _results.push(value);
      }
      return _results;
    })();
    return map(functions, function(fn) {
      return fn();
    }).then(function(results) {
      var i, outputs, result, _i, _len;

      outputs = {};
      for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {
        result = results[i];
        outputs[keys[i]] = result;
      }
      return outputs;
    });
  };

}).call(this);

/*
//@ sourceMappingURL=flow-control.map
*/
