// Generated by CoffeeScript 1.6.2
(function() {
  var collect, getTypeOf, isPromise, makePromise;

  isPromise = require("./utilities").isPromise;

  makePromise = require("make-promise");

  module.exports = collect = function(inputs) {
    if (isPromise(inputs)) {
      return inputs;
    }
    return makePromise(function(cb) {
      var err, i, indexes, key, numRemaining, outputs, promise, promises, resolver, value, _i, _len;

      switch (getTypeOf(inputs)) {
        case "object":
          outputs = {};
          break;
        case "array":
          outputs = new Array(inputs.length);
          break;
        default:
          return cb(new Error("You can only collect arrays or objects."));
      }
      promises = [];
      indexes = [];
      for (key in inputs) {
        value = inputs[key];
        if (isPromise(value)) {
          promises.push(value);
          indexes.push(key);
        } else {
          outputs[key] = value;
        }
      }
      if (!(promises.length > 0)) {
        return cb(null, outputs);
      }
      numRemaining = promises.length;
      resolver = function(i) {
        return function(result) {
          outputs[indexes[i]] = result;
          numRemaining--;
          if (!(numRemaining > 0)) {
            return cb(null, outputs);
          }
        };
      };
      for (i = _i = 0, _len = promises.length; _i < _len; i = ++_i) {
        promise = promises[i];
        try {
          promise.then(resolver(i), function(err) {
            return cb(err);
          });
        } catch (_error) {
          err = _error;
          return cb(err);
        }
      }
    });
  };

  getTypeOf = (function() {
    var classToType, name, _i, _len, _ref;

    classToType = {};
    _ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;

      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

}).call(this);

/*
//@ sourceMappingURL=collect.map
*/
