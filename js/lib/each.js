// Generated by CoffeeScript 1.12.2
(function() {
  var each, makePromise, throttle;

  makePromise = require("make-promise");

  throttle = require("f-throttle");

  module.exports = each = function(values, iterator, arg) {
    var concurrency, getFinalValue, handleResult, ref, stopEarly;
    ref = arg != null ? arg : {}, concurrency = ref.concurrency, handleResult = ref.handleResult, stopEarly = ref.stopEarly, getFinalValue = ref.getFinalValue;
    return makePromise(function(cb) {
      var error, i, j, len, numRemaining, promise, promises, resolver, results, stopped, throttledIterator, value;
      if (!values.length) {
        return cb(null, typeof getFinalValue === "function" ? getFinalValue() : void 0);
      }
      if (concurrency == null) {
        concurrency = 1024;
      }
      throttledIterator = throttle(concurrency, iterator);
      if (!values.length) {
        return cb(null, typeof getFinalValue === "function" ? getFinalValue() : void 0);
      }
      try {
        promises = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = values.length; j < len; j++) {
            value = values[j];
            results.push(throttledIterator(value));
          }
          return results;
        })();
      } catch (error1) {
        error = error1;
        return cb(error);
      }
      stopped = false;
      numRemaining = promises.length;
      resolver = function(index) {
        return function(value) {
          if (stopped) {
            return;
          }
          try {
            if (typeof handleResult === "function") {
              handleResult(value, index);
            }
          } catch (error1) {
            error = error1;
            stopped = true;
            return cb(error);
          }
          numRemaining--;
          if (numRemaining === 0 || (typeof stopEarly === "function" ? stopEarly() : void 0)) {
            stopped = true;
            return cb(null, typeof getFinalValue === "function" ? getFinalValue() : void 0);
          }
        };
      };
      results = [];
      for (i = j = 0, len = promises.length; j < len; i = ++j) {
        promise = promises[i];
        try {
          results.push(promise.then(resolver(i), function(error) {
            return cb(error);
          }));
        } catch (error1) {
          error = error1;
          cb(error);
          results.push(stopped = true);
        }
      }
      return results;
    });
  };

}).call(this);

//# sourceMappingURL=each.js.map
