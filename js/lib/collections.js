// Generated by CoffeeScript 1.6.2
(function() {
  var each, eachSeries, faithful, makePromise;

  makePromise = require("make-promise");

  each = require("./each");

  eachSeries = require("./eachSeries");

  module.exports = faithful = {
    map: function(values, iterator) {
      var results;

      results = [];
      return each(values, iterator, {
        handleResult: function(value, i) {
          return results[i] = value;
        },
        getFinalValue: function() {
          return results;
        }
      });
    },
    mapSeries: function(inputs, iterator) {
      var results;

      results = [];
      return eachSeries(inputs, iterator, {
        handleResult: function(result) {
          return results.push(result);
        },
        getFinalValue: function() {
          return results;
        }
      });
    },
    reduce: function(values, reduction, iterator) {
      return eachSeries(values, (function(value) {
        return iterator(reduction, value);
      }), {
        handleResult: function(result) {
          return reduction = result;
        },
        getFinalValue: function() {
          return reduction;
        }
      });
    },
    detectSeries: function(values, iterator) {
      var found, foundValue;

      found = false;
      foundValue = void 0;
      return eachSeries(values, iterator, {
        handleResult: function(result, i) {
          if (!result) {
            return;
          }
          foundValue = values[i];
          return found = true;
        },
        getFinalValue: function() {
          return foundValue;
        },
        stopEarly: function() {
          return found;
        }
      });
    },
    detect: function(values, iterator) {
      var found, foundValue;

      found = false;
      foundValue = void 0;
      return each(values, iterator, {
        handleResult: function(result, i) {
          if (!result) {
            return;
          }
          foundValue = values[i];
          return found = true;
        },
        getFinalValue: function() {
          return foundValue;
        },
        stopEarly: function() {
          return found;
        }
      });
    },
    filter: function(values, iterator) {
      var matchingValues;

      matchingValues = [];
      return each(values, iterator, {
        handleResult: function(result, i) {
          if (result) {
            return matchingValues.push(values[i]);
          }
        },
        getFinalValue: function() {
          return matchingValues;
        }
      });
    },
    filterSeries: function(values, iterator) {
      var matchingValues;

      matchingValues = [];
      return eachSeries(values, iterator, {
        handleResult: function(result, i) {
          if (result) {
            return matchingValues.push(values[i]);
          }
        },
        getFinalValue: function() {
          return matchingValues;
        }
      });
    },
    applyEach: function(pairs, iterator) {
      return faithful.map(pairs, function(pair) {
        return iterator.apply({}, pair);
      });
    },
    applyEachSeries: function(pairs, iterator) {
      return faithful.mapSeries(pairs, function(pair) {
        return iterator.apply({}, pair);
      });
    }
  };

}).call(this);

/*
//@ sourceMappingURL=collections.map
*/
